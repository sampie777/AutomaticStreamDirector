{"version":3,"sources":["components/notification/notifications.js","components/triggers/TriggerComp.tsx","api.js","components/triggers/TriggerListComp.tsx","components/actions/ActionSetComp.tsx","components/actions/ActionSetListComp.tsx","components/director/DirectorStatusComp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Notification","title","message","type","this","INFO","SUCCESS","ERROR","addNotification","notification","window","NotificationComponent","props","state","notifications","bind","removeNotification","console","info","setState","concat","error","newList","filter","n","id","map","remove","Component","NotificationMessage","element","React","createRef","getTransitionDurationForElement","setTimeout","current","debug","style","opacity","transitionDuration","transitionDurationString","getComputedStyle","substring","length","className","ref","onClick","TriggerComp","trigger","name","importance","conditions","it","actionSets","apiBaseUrl","location","hostname","origin","log","get","url","fetch","method","api","list","start","stop","status","lastTrigger","TriggerListComp","triggers","loadList","then","response","json","data","catch","sort","a","b","ActionSetComp","actionSet","actions","ActionSetListComp","DirectorStatusComp","keepPolling","isRunning","update","finally","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3e9ea1f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './notifications.css';\n\nexport class Notification {\n    constructor(title, message, type) {\n        this.title = title;\n        this.message = message;\n        this.type = type;\n    }\n\n    static INFO = \"info\";\n    static SUCCESS = \"success\";\n    static ERROR = \"error\";\n}\n\n/* NOTIFICATIONS */\nconst notificationDuration = 10_000;\n\nexport function addNotification(notification) {\n    window.addNotification(notification);\n}\n\nexport class NotificationComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            notifications: []\n        }\n\n        window.addNotification = (notification) => this.addNotification(notification)\n\n        this.addNotification = this.addNotification.bind(this)\n        this.removeNotification = this.removeNotification.bind(this)\n    }\n\n    addNotification(notification) {\n        if (!(notification instanceof Notification)) {\n            console.error(\"Cannot add notification, not a valid instance: \", notification);\n            return\n        }\n\n        console.info(\"Adding notification: \", notification);\n\n        this.setState({\n            notifications: this.state.notifications.concat([notification])\n        });\n    }\n\n    removeNotification(notification) {\n        const newList = this.state.notifications.filter(n => n !== notification);\n        this.setState({\n            notifications: newList\n        });\n    }\n\n    render() {\n        return <div id=\"notifications\">\n            {this.state.notifications.map(notification =>\n                <NotificationMessage notification={notification}\n                                     key={notification.title}\n                                     remove={() => this.removeNotification(notification)}/>)}\n        </div>;\n    }\n}\n\nclass NotificationMessage extends Component {\n    constructor(props) {\n        super(props);\n        this.notification = props.notification;\n\n        this.element = React.createRef();\n\n        this.getTransitionDurationForElement = this.getTransitionDurationForElement.bind(this);\n        this.removeNotification = this.removeNotification.bind(this);\n    }\n\n    componentDidMount() {\n        window.setTimeout(this.removeNotification, notificationDuration);\n    }\n\n    removeNotification() {\n        let element = this.element.current;\n        console.debug(\"Removing notification:\", this);\n\n        if (element === null){\n            console.debug(\"Notification already (being) removed\");\n            return\n        }\n\n        element.style.opacity = \"0\";\n\n        const transitionDuration = this.getTransitionDurationForElement(element);\n        window.setTimeout(this.props.remove, transitionDuration);\n    }\n\n    getTransitionDurationForElement(element) {\n        const transitionDurationString = window.getComputedStyle(element).transitionDuration;\n        return transitionDurationString.substring(0, transitionDurationString.length - 1) * 1000;\n    }\n\n    render() {\n        return <div className={`notification notification-${this.notification.type}`}\n                    ref={this.element}>\n            <a className=\"notification-close\"\n               onClick={this.removeNotification}>close</a>\n            <div className=\"notification-title\">{this.notification.title}</div>\n            <div className=\"notification-message\">{this.notification.message}</div>\n        </div>;\n    }\n}","import React, {Component} from 'react';\nimport {Condition, Trigger} from \"./objects\";\nimport {ActionSet} from \"../actions/objects\";\n\ninterface ComponentProps {\n    trigger: Trigger,\n}\n\nexport default class TriggerComp extends Component<ComponentProps, any> {\n    private trigger: Trigger;\n\n    constructor(props: ComponentProps) {\n        super(props);\n        this.trigger = props.trigger;\n    }\n\n    render() {\n        return <div>\n            <div>{this.trigger.name} <small>{this.trigger.importance}</small></div>\n            <ol>\n                {this.trigger.conditions.map((it: Condition) => <li key={it.name}>{it.name}</li>)}\n            </ol>\n            <ol>\n                {this.trigger.actionSets.map((it: ActionSet) => <li key={it.name}>{it.name}</li>)}\n            </ol>\n        </div>;\n    }\n}","const apiBaseUrl = (window.location.hostname === \"localhost\") ? \"http://localhost:8080/api/v1\" : window.location.origin + \"/api/v1\";\nconsole.log(\"API base URL: \" + apiBaseUrl);\n\nconst get = (url) => fetch(url, {\n    method: \"GET\"\n});\n\nconst post = (url, data = \"\") => {\n    let headers = {\n        'Content-Type': 'application/json'\n    };\n\n    return fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: headers\n    });\n}\n\nexport const api = {\n    triggers: {\n        list: () => get(`${apiBaseUrl}/triggers/list`),\n        get: (name) => get(`${apiBaseUrl}/triggers/${name}`),\n    },\n    actionSets: {\n        list: () => get(`${apiBaseUrl}/actionsets/list`),\n        get: (name) => get(`${apiBaseUrl}/actionsets/${name}`),\n    },\n    modules: {\n        list: () => get(`${apiBaseUrl}/modules/list`),\n        get: (name) => get(`${apiBaseUrl}/modules/${name}`),\n    },\n    director: {\n        start: () => get(`${apiBaseUrl}/director/start`),\n        stop: () => get(`${apiBaseUrl}/director/stop`),\n        status: () => get(`${apiBaseUrl}/director/status`),\n        lastTrigger: () => get(`${apiBaseUrl}/director/lasttrigger`),\n    },\n    config: {\n        list: () => get(`${apiBaseUrl}/config/list`),\n        get: (key) => get(`${apiBaseUrl}/config/${key}`),\n    },\n};","import React, {Component} from 'react';\nimport TriggerComp from \"./TriggerComp\";\nimport {api} from \"../../api\";\nimport {addNotification, Notification} from \"../notification/notifications\";\nimport {Trigger} from \"./objects\";\n\ninterface ComponentProps {\n}\n\ninterface ComponentState {\n    triggers: Array<Trigger>,\n}\n\nexport default class TriggerListComp extends Component<ComponentProps, ComponentState> {\n    constructor(props: ComponentProps) {\n        super(props);\n\n        this.state = {\n            triggers: [],\n        };\n\n        this.loadList = this.loadList.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadList()\n    }\n\n    loadList() {\n        api.triggers.list()\n            .then(response => response.json())\n            .then(data => {\n                const triggers = data.data;\n\n                console.log(triggers);\n\n                this.setState({\n                    triggers: triggers\n                });\n            })\n            .catch(error => {\n                console.error('Error updating Trigger list', error);\n                addNotification(new Notification(\"Error updating Trigger list\", error.message, Notification.ERROR));\n            });\n    }\n\n    render() {\n        return <div>\n            <h3>Triggers</h3>\n            {this.state.triggers.length > 0 ?\n                this.state.triggers\n                    .sort(((a, b) => b.importance - a.importance))\n                    .map(trigger => <TriggerComp trigger={trigger} key={trigger.name}/>)\n                : <i>Much empty</i>}\n        </div>;\n    }\n}","import React, {Component} from 'react';\nimport {Action, ActionSet} from \"./objects\";\n\ninterface ComponentProps {\n    actionSet: ActionSet,\n}\n\nexport default class ActionSetComp extends Component<ComponentProps, any> {\n    private actionSet: ActionSet;\n\n    constructor(props: ComponentProps) {\n        super(props);\n        this.actionSet = props.actionSet;\n    }\n\n    render() {\n        return <div>\n            <div>{this.actionSet.name}</div>\n            <ol>\n                {this.actionSet.actions.map((it: Action) => <li key={it.name}>{it.name}</li>)}\n            </ol>\n        </div>;\n    }\n}","import React, {Component} from 'react';\nimport {api} from \"../../api\";\nimport {addNotification, Notification} from \"../notification/notifications\";\nimport {ActionSet} from \"./objects\";\nimport ActionSetComp from \"./ActionSetComp\";\n\ninterface ComponentProps {\n}\n\ninterface ComponentState {\n    actionSets: Array<ActionSet>,\n}\n\nexport default class ActionSetListComp extends Component<ComponentProps, ComponentState> {\n    constructor(props: ComponentProps) {\n        super(props);\n\n        this.state = {\n            actionSets: [],\n        };\n\n        this.loadList = this.loadList.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadList()\n    }\n\n    loadList() {\n        api.actionSets.list()\n            .then(response => response.json())\n            .then(data => {\n                const actionSets = data.data;\n\n                console.log(actionSets);\n\n                this.setState({\n                    actionSets: actionSets\n                });\n            })\n            .catch(error => {\n                console.error('Error updating ActionSet list', error);\n                addNotification(new Notification(\"Error updating ActionSet list\", error.message, Notification.ERROR));\n            });\n    }\n\n    render() {\n        return <div>\n            <h3>ActionSets</h3>\n            {this.state.actionSets.length > 0 ?\n                this.state.actionSets\n                    .map(actionSet => <ActionSetComp actionSet={actionSet} key={actionSet.name}/>)\n                : <i>Much empty</i>}\n        </div>;\n    }\n}","import React, {Component} from 'react';\nimport {api} from \"../../api\";\nimport {addNotification, Notification} from \"../notification/notifications\";\n\ninterface ComponentProps {\n}\n\ninterface ComponentState {\n    isRunning: boolean\n}\n\nexport default class DirectorStatusComp extends Component<ComponentProps, ComponentState> {\n    private keepPolling: boolean = true;\n\n    constructor(props: ComponentProps) {\n        super(props);\n\n        this.state = {\n            isRunning: false,\n        };\n\n        this.update = this.update.bind(this);\n    }\n\n    componentDidMount() {\n        this.update()\n    }\n\n    update() {\n        api.director.status()\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    isRunning: data.data,\n                });\n            })\n            .catch(error => {\n                console.error('Error updating Director status', error);\n                addNotification(new Notification(\"Error updating Director status\", error.message, Notification.ERROR));\n\n                this.setState({\n                    isRunning: false,\n                });\n            })\n            .finally(() => {\n                if (this.keepPolling) {\n                    window.setTimeout(this.update, 2000, this.keepPolling);\n                }\n            });\n    }\n\n    render() {\n        return <div>State: {this.state.isRunning ? \"Running\" : \"Not running\"}</div>;\n    }\n}","import React from 'react';\nimport './App.css';\nimport {NotificationComponent} from \"./components/notification/notifications\";\nimport TriggerListComp from \"./components/triggers/TriggerListComp\";\nimport ActionSetListComp from \"./components/actions/ActionSetListComp\";\nimport DirectorStatusComp from \"./components/director/DirectorStatusComp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotificationComponent/>\n\n      <DirectorStatusComp/>\n      <TriggerListComp/>\n      <ActionSetListComp/>\n    </div>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}